#include<stdlib.h>
#include<stdio.h>
#define LIST_INIT_SIZE 100
#define ElemType int
typedef struct {
    ElemType* elem;
    int length;
    int listsize;
}Sqlist;

//生成一个空的线性表
void InitList(Sqlist& L)
{
    L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
    if (!L.elem)
        printf("分配内存失败！\n");
    L.length = 0;
    L.listsize = LIST_INIT_SIZE;
}
//生成具有n个元素的线性表
void CreateList(Sqlist &L, int n)
{
    int i;
    L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
    if (!L.elem)
        printf("存储分配失败！\n");
    L.length = n;
    L.listsize = LIST_INIT_SIZE;
    for (i = 1; i <= n; i++)
        L.elem[i-1] = 2 * i;
}
//在顺序表L中第i个位置之前插入新的元素e
int ListInsert(Sqlist& L, int i, ElemType e)
{
    if (i < 1 || i > L.length + 1)
        return -1;
    if (L.length >= L.listsize)
    {
        ElemType* newbase = (ElemType*)realloc(L.elem, (L.listsize + LIST_INIT_SIZE) * sizeof(ElemType));
        if (!newbase)
            printf("存储分配失败!\n");
        L.elem = newbase;
        L.listsize += LIST_INIT_SIZE;
    }
    ElemType* q = &L.elem[i - 1]; //q为插入的位置
    ElemType* p;
    for (p = &L.elem[L.length - 1]; p >= q; p--)
        *(p + 1) = *p;
    *q = e;
    L.length++;
    return 0;
}
//顺序表合并法一
//已知线性表La,Lb中的数据元素按值非递减排列
void MergeList_1(Sqlist& La, Sqlist& Lb, Sqlist& Lc)
{
    int i = 1;
    int j = 1;
    int k = 0;
    while ((i <= La.length) && (j <= Lb.length))
    {
        if (La.elem[i - 1] <= Lb.elem[j - 1])
        {
            ListInsert(Lc, ++k, La.elem[i - 1]);
            ++i;
           // printf("**i:%d,**k:%d\n", i, k);
        }
        else
        {
            ListInsert(Lc, ++k, Lb.elem[j - 1]);
            ++j;
           // printf("**j:%d,**k:%d\n", j, k);
        }
    }
   // printf("i:%d,j:%d,k:%d", i, j, k);
    while (i <= La.length)
    {
        ListInsert(Lc, ++k, La.elem[i-1]);
        i++;
    }
    while (j <= Lb.length)
    {
        ListInsert(Lc, ++k, Lb.elem[j-1]);
        j++;
    }
}
//顺序表合并法二
void MergeList_2(Sqlist& La, Sqlist& Lb, Sqlist& Lc)
{
    ElemType *pa = La.elem;
    ElemType *pb = Lb.elem;
    ElemType *pc = Lc.elem;
    Lc.length = La.length + Lb.length;
    ElemType *pa_last = La.elem + La.length - 1;
    ElemType *pb_last = Lb.elem + Lb.length - 1;
    while (pa <= pa_last && pb <= pb_last)
    {
        if (*pa <= *pb)
            *pc++ = *pa++;
        else
            *pc++ = *pb++;
    }
    while (pa <= pa_last)
        *pc++ = *pa++;
    while (pb <= pb_last)
        *pc++ = *pb++;
}
int main()
{
    int i, j, k;
    Sqlist La, Lb, Lc;
    CreateList(La, 10);
    CreateList(Lb, 5);
    printf("La:");
    for (i = 0; i < La.length; i++)
    {
        printf("%d ", La.elem[i]);
    }
    printf("\n");
    printf("Lb:");
    for (j = 0; j < Lb.length; j++)
    {
        printf("%d ", Lb.elem[j]);
    }
    printf("\n");
    InitList(Lc);
    MergeList_1(La, Lb, Lc);
    printf("method_1 Lc:");
   // printf("%d\n", Lc.length);
    for (k = 0; k < Lc.length; k++)
    {
        printf("%d ", Lc.elem[k]);
    }
    printf("\n");
    MergeList_2(La, Lb, Lc);
    printf("method_2 Lc:");
   // printf("%d\n", Lc.length);
    for (k = 0; k < Lc.length; k++)
    {
        printf("%d ", Lc.elem[k]);
    }
    printf("\n");
        return 0;
}
