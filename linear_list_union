#include<stdio.h>
#include<stdlib.h>
#define LIST_INIT_SIZE 100
typedef int ElemType;
typedef struct
{
	ElemType* elem;   //头指针
	int Length;   //当前长度
	int listsize; //总共的空间
}SqList;
/*构造一个空的线性表L*/
int InitList(SqList *L)
{
	L->listsize = LIST_INIT_SIZE;
	L->Length = 0;
	L->elem = (ElemType* )malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if (!L->elem)
	{
		printf("空间分配失败！");
		return 1;
	}
	return 0;
}
/*生成具有n个元素的顺序表L*/
int CreateList(SqList* L, int n)
{
	int i;
	if (!L->elem)
		printf("未构造线性表！");
	else
	{
		for (i = 0; i < n; i++)
			L->elem[i] = 1+rand()%(20-1+1); //生成1-20的随机正整数
		L->Length = n;
	}
	return 0;
}
/*获取线性表L中的第i个元素赋给e*/
ElemType GetElem(SqList* L, int i)
{
	ElemType e;
	e = L->elem[i - 1];
	return e;
}
/*判断线性表L中是否存在元素e*/
int LocateElem(SqList* L, ElemType e)
{
	int i;
	int temp = 0;
	for (i = 0; i < L->Length; i++)
	{
		if (L->elem[i] == e)
			temp = 1;
	}
	if (temp == 0)
	{
		printf("线性表中不存在元素%d\n", e);
		return 1;
	}
	else
	{
		printf("线性表中存在元素%d\n", e);
		return 0;
	}
}
/*向线性表L中第i个位置添加一个元素e*/
int ListInsert(SqList* L, ElemType e, int pos)
{
	if (pos < 1 || pos > L->listsize + 1)
	{
		/*若Pos越界则插入失败*/
		return 1;
	}
	if (L->Length == L->listsize)
	{
		/*重新分配更大的存储空间  为原始空间的两倍*/
		ElemType *p = (ElemType*)realloc(L->elem, 2 * L->listsize * sizeof(ElemType));
		if (!p)
		{
			printf("存储空间分配失败！");
			return 1;
		}
		L->elem = p;
		L->listsize = 2 * L->listsize;
	}
	L->elem[pos - 1] = e;
	//++L->Length;
	/*printf("加入元素后的线性表为： ");
	for (int i = 0; i < L->Length; i++)
	{
		printf("%d ", L->elem[i]);
	}
	printf("\n");*/
	return 0;
}
/*将两个顺序表La,Lb合并*/
void UnionList(SqList* La, SqList* Lb)
{
	int i;
	ElemType e;
	for (i = 1; i <= Lb->Length; i++)
	{
		//printf("Lb的长度为%d\n", Lb->Length);
		e=GetElem(Lb, i);
		if (LocateElem(La, e))
		{
			ListInsert(La, e, ++La->Length);
		}
	}
}
/*删除线性表中第i个元素,并用e返回其值*/
int ListDelete(SqList* L, int i, ElemType *e)
{
	if ((i < 1) || (i > L->Length))
		return -1;
	*e = L->elem[i - 1];
	ElemType* p = &L->elem[i - 1]; //p为删除元素的指针
	ElemType* q = &L->elem[L->Length - 1];
	for (++p; p<=q; ++p)
		*(p - 1) = *p;
	--L->Length;
	return 0;
}
int main()
{
	//将两个线性表合并
	int i,j;
	ElemType e=0;
	SqList La, Lb;
	InitList(&La);
	InitList(&Lb);
	CreateList(&La, 8);
	CreateList(&Lb, 5);
	printf("La:");
	for (i = 0; i < La.Length; i++)
	{
		printf("%d ", La.elem[i]);
	}
	printf("\n");
	printf("Lb:");
	for (j = 0; j < Lb.Length; j++)
	{
		printf("%d ", Lb.elem[j]);
	}
	printf("\n");
	UnionList(&La, &Lb);
	printf("La&Lb:");
	for (i = 0; i < La.Length; i++)
	{
		printf("%d ", La.elem[i]);
	}
	printf("\n");
	ListDelete(&La, 3, &e);
	printf("删掉第3个元素后的线性表为：\n");
	for (i = 0; i < La.Length; i++)
	{
		printf("%d ", La.elem[i]);
	}
	printf("\n");
	printf("删掉的元素是：%d\n", e);
	return 0;
}
